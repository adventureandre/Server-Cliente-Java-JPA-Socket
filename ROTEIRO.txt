analisar SGBD:
	configurar Banco
		permitir acesso com senha
		TCP		
		https://www.youtube.com/watch?v=7T9_4Gvw2Qo

	criar banco no arquivo sql em anexo
	
	Conexão jdbc
	jdbc:sqlserver://localhost:1433;databaseName=loja;encrypt=true;trustServerCertificate=true;


parte 1	
	* conectar no banco
	* testar consulta de tabelas
parte 2 
código:	
	* conectar com o banco por jdbc
	* conectar o banco com as classes (EntityManagerFactory)
	* fazer a conexão do socket (servidor-clientes)
		** gravar e ler dados do socket (in e out)
	
	* usar o controlers para comunicar com o banco de dados
	
	* Usar thread (por que???)
		** No servidor cada conexão com um cliente é uma thread
		
	* Java Swing 
	
******************************************************************************************************************	



---------------   PARTE 1 SERVER SEM THREAD ---------------------------------- 
No server.java	
	EntityManagerFactory emf = Persistence.createEntityManagerFactory("server1PU");	

	UsuariosJpaController ctrlUsu = new UsuariosJpaController(emf);	
	
	try (ServerSocket serverSocket = new ServerSocket(1234)) {
            System.out.println("Servidor aguardando conexoes na porta 1234...");
			Socket socket = serverSocket.accept();
			
			+++++ SECAO OUVIR ++++++
			
	}
	
	
			--- SECAO OUVIR ---- 	
            try (ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream()); ObjectInputStream in = new ObjectInputStream(socket.getInputStream())) {
				++++SECAO IN E OUT+++++
				
				++++SECAO BANCO DE DADOS+++++++
            }
				
				
				-----------------------------SECAO IN E OUT-----------------------
                String login = (String) in.readObject();
                String senha = (String) in.readObject();
                String mensagem = (String) in.readObject();
                System.out.println("login=" + login + "   senha=" + senha);
                System.out.println("mensagem=" + mensagem);
                out.writeObject("GRAVANDO NO BANCO - login=" + login + " senha=" + login);
                out.flush();			
				-----------------------------FIM SECAO IN E OUT-----------------------
				
				--------------------------SECAO BANCO DE DADOS ------------------------
					List<Usuarios> usuariosList = ctrlUsu.findUsuariosEntities();
					int tamanhoLista= usuariosList.size();
					System.out.println("tamnho="+tamanhoLista);            
					for (Usuarios usuario : usuariosList) {
						System.out.println("login="+usuario.getLogin());            
					}
				   
						System.out.println("GRAVANDO NO BANCO - login=" + login + " senha=" + login);
					Usuarios userTeste = new Usuarios((tamanhoLista+1));
					userTeste.setLogin(login+(tamanhoLista+1));
					userTeste.setSenha(senha+(tamanhoLista+1));
					
					ctrlUsu.create(userTeste);
				--------------------------FIM SECAO BANCO DE DADOS ------------------------
				
---------------  FIM PARTE 1 SERVER  SEM THREAD ---------------------------------- 			

----------------------PARTE 1 CLIENTE -----------------------------------------
        Socket socket = new Socket("localhost", 1234);
        ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
        ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
			++++++SECAO IN E OUT+++++++
			
			
             ------------------ SECAO IN E OUT	----------------------------------------
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("------------------------------");
        System.out.print("Login: ");
        String login = reader.readLine();
        System.out.print("Senha: ");
        String senha = reader.readLine();

        out.writeObject(login);
        out.writeObject(senha);
        out.writeObject("Mensagem do cliente para o servidor.");
        out.flush();

        String mensagem = (String) in.readObject();
        System.out.println("mensagem recebida do servidor=" + mensagem);
          ------------------ FIM SECAO IN E OUT	----------------------------------------

----------------------FIM PARTE 1 CLIENTE -----------------------------------------



****************************************************************************************************






---------------   PARTE 2 SERVER COM THREAD ---------------------------------- 
No server.java	

	EntityManagerFactory emf = Persistence.createEntityManagerFactory("testeServerAula2PU");	
	UsuariosJpaController ctrlUsu = new UsuariosJpaController(emf);	
	
	try (ServerSocket serverSocket = new ServerSocket(1234)) {
            System.out.println("Servidor aguardando conexoes na porta 1234...");
            while (true) {
                Socket socket = serverSocket.accept();
            
            
                ThreadTeste teste = new ThreadTeste( ctrlUsu, socket);
                teste.start();
                System.out.println("thread iniciado!");
            
            }
	}
	
	
--------------------thread Server---------------------	
public class ThreadTeste extends Thread {

    private final UsuariosJpaController ctrlUsu;
    private final Socket s1;

    public ThreadTeste(UsuariosJpaController ctrlUsu, Socket s1) {
        this.ctrlUsu = ctrlUsu;
        this.s1 = s1;
    }

    public void run() {
			+++++ SECAO OUVIR ++++++
	}
-------------------------------------------------------------

---------------  FIM PARTE 2 SERVER COM THREAD ---------------------------------- 








---------------   PARTE 2 CLIENTE COM THREAD ---------------------------------- 

CLIENTE.JAVA
        Socket socket = new Socket("localhost", 1234);
        ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
        ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		
		ThreadClient threadClient = new ThreadClient(in);
        threadClient.start();
		
			++++++SECAO OUT+++++++
			
			
             ------------------ SECAO OUT	----------------------------------------
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("------------------------------");
        System.out.print("Login: ");
        String login = reader.readLine();
        System.out.print("Senha: ");
        String senha = reader.readLine();

        out.writeObject(login);
        out.writeObject(senha);
        out.writeObject("Mensagem do cliente para o servidor.");
        out.flush();
          ------------------ FIM SECAO OUT	----------------------------------------



--------------------thread cliente---------------------	

public class ThreadClient extends Thread {

    private ObjectInputStream in;
    private final JTextArea textArea;
    private JFrame frame;

    public ThreadClient(ObjectInputStream in) {
        this.in = in;
        frame = new JFrame("Mensagens do Servidor");
        textArea = new JTextArea(20, 50);
        textArea.setEditable(false);
        frame.add(new JScrollPane(textArea));
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);

    }

    @Override
    public void run() {
        try {
            while (true) {
                Object data = in.readObject();
                String mensagem = (String) data;
                SwingUtilities.invokeLater(() -> {
                    textArea.append(mensagem + "\n");
                    textArea.setCaretPosition(textArea.getDocument().getLength()); // Rolagem automática
                });
            }
        } catch (Exception e) {
            // Lidar com exceções, se necessário
        }
    }
}


        



